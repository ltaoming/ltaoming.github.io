"projectData": "[{\"_id\":\"634ac0037122f4a32ffff519\",\"img\":\"/assets/img/covid.jpeg\",\"title\":\"Research and Implementation of Activity Recognition Algorithm\",\"tags\":{\"language\":{\"Python\":true,\"Java\":true,\"C/C++/Verilog\":false,\"JavaScript\":false,\"ReactJS/VueJS\":false,\"MongoDB/SQL\":false,\"ExpressJS\":false,\"NodeJs\":false,\"CSS\":false,\"HTML\":true,\"Django\":false,\"AWS\":false},\"category\":{\"Algorithms \u0026 Data Structures\":false,\"Mobile Dev\":true,\"Games\":false,\"Machine Learning\":true,\"Full Stack\":false,\"Back End\":false,\"Front End\":false}},\"url\":\"https://github.com/ayaka14732/ByteVid\",\"demoUrl\":\" s\",\"desc\":\"  ### ðŸ“œ Project Description\\n  ###### â€£ Developed an **Android smartwatch** sensor data collection application for **TicWatch Pro 3**. The application efficiently collects, preprocesses, and stores data from various sensors like the gyroscope at different frequencies and active labels.\\n###### â€£ Implemented the **Kalman Filter** to eliminate data noise, and stored the final data in *.csv* format using the **FTP Protocol**.\\n###### â€£ Utilized **NavExplorer** for seamless storage confirmation and connection between the smartwatch and computer.\\n###### â€£ Incorporated residual connections and bidirectional units to **LSTM** (Long Short-Term Memory) to ensure effective information transmission.\\n###### â€£ The constructed network achieved **5% higher** compared to the simple LSTM network on activity recognition of the smartwatch dataset generated by the mobile application.\\n ### ðŸ’¡ Tech Stack\\n##### Android Studio, TensorFlow, WearOS, sklearn\",\"order\":-6},{\"_id\":\"633281d353d373a940186f6c\",\"img\":\"/images/travis.png\",\"title\":\"Easy Learn â€“ an online education platform\",\"tags\":{\"language\":{\"Python\":false,\"Java\":true,\"C/C++/Verilog\":false,\"JavaScript\":true,\"ReactJS/VueJS\":true,\"MongoDB/SQL\":true,\"ExpressJS\":false,\"NodeJs\":true,\"CSS\":true,\"HTML\":true,\"Django\":false,\"AWS\":false},\"category\":{\"Algorithms \u0026 Data Structures\":false,\"Mobile Dev\":false,\"Games\":false,\"Machine Learning\":false,\"Full Stack\":true,\"Back End\":true,\"Front End\":true}},\"url\":\"https://github.com/Yevet/easy_learn\",\"demoUrl\":\"\",\"desc\":\"### ðŸ“œ Project Description\\n###### â€£ Implemented a **B2C** platform with client system and management system. \\n###### â€£ Integrated **Spring Security** for permission control. Employed **Redis** for homepage data caching and Swagger(RESTful API style) for API documentation generation. Implemented **Nginx** for request forwarding and load balancing. \\n###### â€£ Leveraged **Webpack** for static resource bundling and utilized **Axios** for seamless backend data transmission.\\n### ðŸ“Œ Front End Design\\n###### â€£ Utilized **Vue.js and ES6** for frontend modular development. Constructed the page environment using **Nuxt** framework and Vue-admin template, with **Element-UI** for page layout. \\n### ðŸ“Œ Back End Design\\n###### â€£ Adopted **Spring Boot + Spring Cloud microservice architecture** for the backend, incorporating modules like main service, video upload and image upload. \\n###### â€£ Utilized **Feign, Gateway, Hystrix, Nacos** for inter-module communication. Leveraged **MyBatis Plus** for persistence operations, **OAuth2 + JWT** for **distributed** **access**\\n### ðŸ’¡ Tech Stack\\n##### Spring Boot, JavaScript, Vue.js, MySQL, Babel\",\"order\":-5},{\"_id\":\"6322e03bafadf90510d1ae1a\",\"img\":\"https://img.youtube.com/vi/WL4-_uzH2Ec/0.jpg\",\"title\":\"Home land â€“ a real estate marketplace app\",\"tags\":{\"language\":{\"Python\":false,\"Java\":true,\"C/C++/Verilog\":false,\"JavaScript\":true,\"ReactJS/VueJS\":true,\"MongoDB/SQL\":true,\"ExpressJS\":false,\"NodeJs\":true,\"CSS\":true,\"HTML\":true,\"Django\":false,\"AWS\":false},\"category\":{\"Algorithms \u0026 Data Structures\":false,\"Mobile Dev\":false,\"Games\":false,\"Machine Learning\":false,\"Full Stack\":true,\"Back End\":true,\"Front End\":true}},\"url\":\"https://github.com/Yevet/home_land\",\"demoUrl\":\"\",\"desc\":\"### ðŸ“œ Project Description\\n###### â€£ Created a user-centric experience with various features enhancing user interaction and property management including advanced searching options for customized property search and user dashboards tailored for both buyers and sellers.\\n###### â€£ Implemented the **Google Maps and Places API** to display maps and enable address autocomplete. Additionally, implemented geo-location-based search functionality to enhance property filtering.\\n### ðŸ“Œ Front End Design\\n###### â€£ Leveraged the power of **React Context** to facilitate seamless state management and enhance the overall user experience.\\n### ðŸ“Œ Back End Design\\n###### â€£ Executed advanced CRUD operations using **MongoDB** and **Mongoose ODM** for efficient data management.\\n### ðŸ’¡ Tech Stack\\n##### MongoDB, Express, React, Node.js\",\"order\":-3}]",
					